# UNITECH - Sistema de Refor√ßo de Estudo Personalizado
import random

def fazer_quiz_html(quiz_html, biblioteca):
    """Fun√ß√£o para realizar o quiz de HTML com 3 tentativas e refor√ßo personalizado"""
    
    tentativas = 0
    max_tentativas = 3
    nota_minima = 70
    
    while tentativas < max_tentativas:
        tentativas += 1
        print(f"\nüéØ QUIZ DE HTML - TENTATIVA {tentativas}/3")
        print("=" * 50)
        
        # Seleciona 2 perguntas aleat√≥rias de cada cap√≠tulo (total: 12 perguntas)
        perguntas_quiz = []
        for capitulo in range(1, 7):
            perguntas_capitulo = quiz_html[capitulo].copy()
            random.shuffle(perguntas_capitulo)
            perguntas_quiz.extend(perguntas_capitulo[:2])  # 2 perguntas por cap√≠tulo
        
        random.shuffle(perguntas_quiz)
        
        acertos = 0
        respostas_erradas = []
        
        # Aplica o quiz
        for i, pergunta in enumerate(perguntas_quiz, 1):
            print(f"\nüìù PERGUNTA {i}/12:")
            print(pergunta["pergunta"])
            for opcao in pergunta["opcoes"]:
                print(opcao)
            
            resposta_usuario = input("\nSua resposta (A, B, C ou D): ").upper().strip()
            
            if resposta_usuario == pergunta["resposta"]:
                print("‚úÖ Correto!")
                acertos += 1
            else:
                print(f"‚ùå Incorreto! A resposta correta √©: {pergunta['resposta']}")
                respostas_erradas.append(pergunta)
        
        # Calcula a nota
        nota = (acertos / len(perguntas_quiz)) * 100
        print(f"\nüìä RESULTADO DA TENTATIVA {tentativas}:")
        print(f"Acertos: {acertos}/{len(perguntas_quiz)}")
        print(f"Nota: {nota:.1f}%")
        
        if nota >= nota_minima:
            print("üéâ PARAB√âNS! VOC√ä FOI APROVADO!")
            print("‚úÖ Quiz conclu√≠do com sucesso!")
            return
        else:
            print(f"‚ö†Ô∏è Nota insuficiente. M√≠nimo necess√°rio: {nota_minima}%")
            
            if tentativas < max_tentativas:
                print(f"\nVoc√™ ainda tem {max_tentativas - tentativas} tentativa(s).")
                
                # Gera refor√ßo personalizado baseado nos erros
                gerar_plano_reforco_personalizado(respostas_erradas, biblioteca)
                
                continuar = input("\nDeseja tentar novamente? (S/N): ").upper().strip()
                if continuar != 'S':
                    break
            else:
                print("\n‚ùå LIMITE DE TENTATIVAS ATINGIDO!")
                print("üìö PLANO DE REFOR√áO FINAL:")
                gerar_plano_reforco_personalizado(respostas_erradas, biblioteca)
                print("\nüí° Recomenda√ß√£o: Estude mais e procure seu mentor para orienta√ß√£o adicional.")

def gerar_plano_reforco_personalizado(respostas_erradas, biblioteca):
    """Gera um plano de refor√ßo personalizado baseado nos erros do aluno"""
    print("\nüìã PLANO DE REFOR√áO PERSONALIZADO:")
    print("=" * 40)
    
    # Agrupa erros por cap√≠tulo
    erros_por_capitulo = {}
    for erro in respostas_erradas:
        capitulo = erro["capitulo"]
        if capitulo not in erros_por_capitulo:
            erros_por_capitulo[capitulo] = []
        erros_por_capitulo[capitulo].append(erro)
    
    # Recursos de refor√ßo por cap√≠tulo - m√∫ltiplas op√ß√µes para randomiza√ß√£o
    recursos_reforco = {
        1: {
            "sites": [
                "https://developer.mozilla.org/pt-BR/docs/Web/HTML/Element/html",
                "https://www.w3schools.com/html/html_basic.asp",
                "https://html.com/document/",
                "https://www.freecodecamp.org/news/html-basics-for-beginners/",
                "https://htmlreference.io/",
                "https://www.codecademy.com/learn/learn-html"
            ],
            "videos": [
                "Pesquise: 'HTML5 estrutura b√°sica' no YouTube",
                "Pesquise: 'HTML document structure tutorial' no YouTube", 
                "Pesquise: 'HTML b√°sico para iniciantes' no YouTube",
                "Pesquise: 'DOCTYPE HTML5 explica√ß√£o' no YouTube",
                "Pesquise: 'HTML head e body diferen√ßas' no YouTube"
            ],
            "praticas": [
                "Crie 3 p√°ginas HTML b√°sicas com estrutura completa",
                "Desenvolva um site pessoal simples com 5 p√°ginas",
                "Fa√ßa uma p√°gina 'Sobre Mim' com estrutura HTML5",
                "Crie uma landing page b√°sica para um produto fict√≠cio",
                "Desenvolva um portf√≥lio online simples"
            ]
        },
        2: {
            "sites": [
                "https://developer.mozilla.org/pt-BR/docs/Web/HTML/Element/header",
                "https://www.w3schools.com/html/html5_semantic_elements.asp",
                "https://html5doctor.com/",
                "https://www.smashingmagazine.com/2013/01/the-importance-of-sections/",
                "https://webdesign.tutsplus.com/articles/quick-tip-use-semantic-html5-elements--webdesign-3384",
                "https://css-tricks.com/why-how-and-when-to-use-semantic-html-and-aria/"
            ],
            "videos": [
                "Pesquise: 'HTML5 semantic elements' no YouTube",
                "Pesquise: 'HTML sem√¢ntico tutorial completo' no YouTube",
                "Pesquise: 'header nav main aside footer HTML5' no YouTube",
                "Pesquise: 'semantic HTML accessibility' no YouTube",
                "Pesquise: 'HTML5 layout estrutural' no YouTube"
            ],
            "praticas": [
                "Crie uma p√°gina usando todas as tags sem√¢nticas",
                "Desenvolva um blog layout com header, nav, main, aside e footer",
                "Fa√ßa uma p√°gina de not√≠cias com estrutura sem√¢ntica completa",
                "Crie um site de empresa com se√ß√µes bem definidas",
                "Desenvolva uma p√°gina de e-commerce com layout sem√¢ntico"
            ]
        },
        3: {
            "sites": [
                "https://developer.mozilla.org/pt-BR/docs/Web/HTML/Element/form",
                "https://www.w3schools.com/html/html_forms.asp",
                "https://html.com/forms/",
                "https://webdesign.tutsplus.com/articles/bring-your-forms-up-to-date-with-css3-and-html5-validation--webdesign-4738",
                "https://css-tricks.com/form-validation-ux-html-css/",
                "https://www.smashingmagazine.com/2018/08/ux-html5-mobile-form-part-1/"
            ],
            "videos": [
                "Pesquise: 'HTML forms tutorial' no YouTube",
                "Pesquise: 'formul√°rios HTML completo' no YouTube",
                "Pesquise: 'HTML form validation' no YouTube",
                "Pesquise: 'input types HTML5' no YouTube",
                "Pesquise: 'formul√°rio de contato HTML' no YouTube"
            ],
            "praticas": [
                "Crie 3 formul√°rios diferentes (contato, cadastro, pesquisa)",
                "Desenvolva um formul√°rio de inscri√ß√£o completo com valida√ß√£o",
                "Fa√ßa um formul√°rio de feedback com diferentes tipos de input",
                "Crie um formul√°rio de pedido online para restaurante",
                "Desenvolva um formul√°rio de cadastro de usu√°rio com m√∫ltiplas etapas"
            ]
        },
        4: {
            "sites": [
                "https://developer.mozilla.org/pt-BR/docs/Web/HTML/Element/ul",
                "https://www.w3schools.com/html/html_lists.asp",
                "https://css-tricks.com/almanac/elements/u/ul/",
                "https://html.com/lists/",
                "https://www.codecademy.com/resources/docs/html/lists",
                "https://developer.mozilla.org/pt-BR/docs/Web/HTML/Element/a"
            ],
            "videos": [
                "Pesquise: 'HTML lists and links' no YouTube",
                "Pesquise: 'listas HTML ul ol dl' no YouTube",
                "Pesquise: 'HTML navigation menu' no YouTube",
                "Pesquise: 'links HTML target blank' no YouTube",
                "Pesquise: 'menu responsivo HTML' no YouTube"
            ],
            "praticas": [
                "Crie um menu de navega√ß√£o com listas e links",
                "Desenvolva uma p√°gina com diferentes tipos de listas",
                "Fa√ßa um menu dropdown usando apenas HTML",
                "Crie uma lista de produtos com links para detalhes",
                "Desenvolva um √≠ndice de conte√∫do com links internos"
            ]
        },
        5: {
            "sites": [
                "https://developer.mozilla.org/pt-BR/docs/Web/HTML/Element/img",
                "https://www.w3schools.com/html/html_media.asp",
                "https://html.com/media/",
                "https://css-tricks.com/almanac/elements/i/img/",
                "https://web.dev/fast/#optimize-your-images",
                "https://developer.mozilla.org/pt-BR/docs/Web/HTML/Element/video"
            ],
            "videos": [
                "Pesquise: 'HTML multimedia elements' no YouTube",
                "Pesquise: 'HTML img alt attribute' no YouTube",
                "Pesquise: 'HTML5 video audio tutorial' no YouTube",
                "Pesquise: 'responsive images HTML' no YouTube",
                "Pesquise: 'HTML figure figcaption' no YouTube"
            ],
            "praticas": [
                "Crie uma galeria com imagens, √°udio e v√≠deo",
                "Desenvolva uma p√°gina de portf√≥lio com imagens responsivas",
                "Fa√ßa um player de m√∫sica simples com HTML5",
                "Crie uma galeria de fotos com legendas",
                "Desenvolva uma p√°gina de apresenta√ß√£o com v√≠deos incorporados"
            ]
        },
        6: {
            "sites": [
                "https://developer.mozilla.org/pt-BR/docs/Web/HTML/Element/table",
                "https://www.w3schools.com/html/html_tables.asp",
                "https://css-tricks.com/complete-guide-table-element/",
                "https://html.com/tables/",
                "https://www.codecademy.com/resources/docs/html/tables",
                "https://webaim.org/techniques/tables/"
            ],
            "videos": [
                "Pesquise: 'HTML tables tutorial' no YouTube",
                "Pesquise: 'tabelas HTML thead tbody tfoot' no YouTube",
                "Pesquise: 'HTML table accessibility' no YouTube",
                "Pesquise: 'responsive HTML tables' no YouTube",
                "Pesquise: 'HTML table styling' no YouTube"
            ],
            "praticas": [
                "Crie 3 tabelas: simples, com cabe√ßalho e complexa",
                "Desenvolva uma tabela de pre√ßos para um servi√ßo",
                "Fa√ßa uma tabela de hor√°rios de aulas",
                "Crie uma tabela comparativa de produtos",
                "Desenvolva uma tabela de dados financeiros com totais"
            ]
        }
    }
    
    import random
    
    for capitulo in sorted(erros_por_capitulo.keys()):
        titulo_capitulo = biblioteca[capitulo][0]
        num_erros = len(erros_por_capitulo[capitulo])
        
        print(f"\nüìñ {titulo_capitulo}")
        print(f"   Erros encontrados: {num_erros}")
        print("   üìö Recursos recomendados:")
        
        recursos = recursos_reforco[capitulo]
        
        # Seleciona 2-3 sites aleat√≥rios
        sites_selecionados = random.sample(recursos["sites"], min(3, len(recursos["sites"])))
        print("   üåê Sites para estudar:")
        for site in sites_selecionados:
            print(f"     ‚Ä¢ {site}")
        
        # Seleciona 2-3 v√≠deos aleat√≥rios
        videos_selecionados = random.sample(recursos["videos"], min(3, len(recursos["videos"])))
        print("   üé• V√≠deos:")
        for video in videos_selecionados:
            print(f"     ‚Ä¢ {video}")
        
        # Seleciona 1-2 pr√°ticas aleat√≥rias
        praticas_selecionadas = random.sample(recursos["praticas"], min(2, len(recursos["praticas"])))
        print("   ‚úèÔ∏è Pr√°ticas recomendadas:")
        for pratica in praticas_selecionadas:
            print(f"     ‚Ä¢ {pratica}")
        
        # Tempo varia baseado no n√∫mero de erros
        tempo_base = 2 + (num_erros * 0.5)
        tempo_sugerido = f"{tempo_base:.1f}-{tempo_base + 1:.1f} horas"
        print(f"   ‚è∞ Tempo sugerido: {tempo_sugerido} de estudo")
    
    if erros_por_capitulo:
        print(f"\nüí° DICA GERAL: Revise os cap√≠tulos onde voc√™ errou mais e pratique os exerc√≠cios sugeridos.")
        print("üîÑ Ap√≥s estudar, voc√™ pode refazer o quiz para testar seu conhecimento!")

def estudar_capitulos(biblioteca, curso, quiz_html=None):
    """Fun√ß√£o para estudar cap√≠tulos com navega√ß√£o avan√ßada"""
    capitulo_atual = 1
    max_capitulos = len(biblioteca)
    
    while True:
        print("\n" + "="*60)
        print("üìö MODO ESTUDO - NAVEGA√á√ÉO INTERATIVA")
        print("="*60)
        
        print(f"\nüìñ CAP√çTULOS DISPON√çVEIS ({curso}):")
        for num, (titulo, _) in biblioteca.items():
            status = "üìç ATUAL" if num == capitulo_atual else "‚úÖ CONCLU√çDO" if num < capitulo_atual else "‚è≥ PENDENTE"
            print(f"[{num}] {titulo} - {status}")
        
        print(f"\nüéØ OP√á√ïES DE NAVEGA√á√ÉO:")
        print("[1] Estudar cap√≠tulo atual")
        print("[2] Escolher cap√≠tulo espec√≠fico")
        print("[3] Ir para pr√≥ximo cap√≠tulo")
        print("[4] Ir para cap√≠tulo anterior")
        print("[5] Fazer question√°rio")
        print("[6] Voltar ao menu principal")
        
        try:
            opcao = int(input(f"\nDigite sua op√ß√£o (1-6): "))
            
            if opcao == 1:
                # Estudar cap√≠tulo atual
                if capitulo_atual <= max_capitulos:
                    titulo, conteudo = biblioteca[capitulo_atual]
                    print(f"\nüìö {titulo}")
                    print("="*50)
                    print(f"üìñ Conte√∫do:\n{conteudo}\n")
                    print("‚úÖ Estudo conclu√≠do!")
                    
                    # Menu p√≥s-estudo
                    while True:
                        print(f"\nüéØ O QUE DESEJA FAZER AGORA?")
                        print("[1] Continuar para o pr√≥ximo cap√≠tulo")
                        print("[2] Fazer question√°rio")
                        print("[3] Rever este cap√≠tulo")
                        print("[4] Escolher outro cap√≠tulo")
                        print("[5] Voltar ao menu de navega√ß√£o")
                        
                        try:
                            acao = int(input("Digite sua op√ß√£o (1-5): "))
                            
                            if acao == 1:
                                if capitulo_atual < max_capitulos:
                                    capitulo_atual += 1
                                    print(f"‚û°Ô∏è Avan√ßando para o Cap√≠tulo {capitulo_atual}")
                                else:
                                    print("üéâ Voc√™ completou todos os cap√≠tulos!")
                                    print("üí° Que tal fazer o question√°rio para testar seus conhecimentos?")
                                break
                            elif acao == 2:
                                if curso == "HTML":
                                    fazer_quiz_html(quiz_html, biblioteca)
                                elif curso == "CSS":
                                    fazer_quiz_css(quiz_css, biblioteca)
                                elif curso == "L√ìGICA DE PROGRAMA√á√ÉO":
                                    fazer_quiz_logica(quiz_logica, biblioteca)
                                else:
                                    print("Question√°rio n√£o dispon√≠vel para este curso.")
                                break
                            elif acao == 3:
                                print("üîÑ Revisando o cap√≠tulo atual...")
                                continue
                            elif acao == 4:
                                break
                            elif acao == 5:
                                break
                            else:
                                print("‚ùå Op√ß√£o inv√°lida. Tente novamente.")
                        except ValueError:
                            print("‚ùå Digite apenas n√∫meros de 1 a 5.")
                else:
                    print("üéâ Voc√™ j√° completou todos os cap√≠tulos!")
            
            elif opcao == 2:
                # Escolher cap√≠tulo espec√≠fico
                print("\nüìö ESCOLHA UM CAP√çTULO:")
                for num, (titulo, _) in biblioteca.items():
                    print(f"[{num}] {titulo}")
                
                try:
                    cap_escolhido = int(input("Digite o n√∫mero do cap√≠tulo: "))
                    if cap_escolhido in biblioteca:
                        capitulo_atual = cap_escolhido
                        print(f"üìç Cap√≠tulo {capitulo_atual} selecionado!")
                    else:
                        print("‚ùå Cap√≠tulo inv√°lido.")
                except ValueError:
                    print("‚ùå Digite um n√∫mero v√°lido.")
            
            elif opcao == 3:
                # Pr√≥ximo cap√≠tulo
                if capitulo_atual < max_capitulos:
                    capitulo_atual += 1
                    print(f"‚û°Ô∏è Avan√ßando para o Cap√≠tulo {capitulo_atual}")
                else:
                    print("‚ùå Voc√™ j√° est√° no √∫ltimo cap√≠tulo!")
            
            elif opcao == 4:
                # Cap√≠tulo anterior
                if capitulo_atual > 1:
                    capitulo_atual -= 1
                    print(f"‚¨ÖÔ∏è Voltando para o Cap√≠tulo {capitulo_atual}")
                else:
                    print("‚ùå Voc√™ j√° est√° no primeiro cap√≠tulo!")
            
            elif opcao == 5:
                # Fazer question√°rio baseado no curso atual
                if curso == "HTML":
                    fazer_quiz_html(quiz_html, biblioteca)
                elif curso == "CSS":
                    fazer_quiz_css(quiz_css, biblioteca)
                elif curso == "L√ìGICA DE PROGRAMA√á√ÉO":
                    fazer_quiz_logica(quiz_logica, biblioteca)
                else:
                    print("‚ùå c n√£o dispon√≠vel para este curso.")
            
            elif opcao == 6:
                # Voltar ao menu principal
                print("üîô Voltando ao menu principal...")
                break
            
            else:
                print("‚ùå Op√ß√£o inv√°lida. Digite um n√∫mero de 1 a 6.")
                
        except ValueError:
            print("‚ùå Digite apenas n√∫meros de 1 a 6.")

# Quiz CSS - Expandido com mais perguntas
quiz_css = {
    1: [
        ("Qual √© a forma correta de aplicar CSS externo?", ["<link rel='stylesheet' href='estilo.css'>", "<style src='estilo.css'>", "<css href='estilo.css'>", "<import css='estilo.css'>"], 0),
        ("Como selecionar um elemento por classe?", [".classe", "#classe", "classe", "*classe"], 0),
        ("Qual seletor tem maior especificidade?", ["elemento", ".classe", "#id", "*"], 2),
        ("Como aplicar CSS apenas para telas menores que 768px?", ["@media (max-width: 768px)", "@screen (max: 768px)", "@responsive (768px)", "@mobile (768px)"], 0),
        ("Qual propriedade define a cor do texto?", ["text-color", "font-color", "color", "foreground"], 2),
        ("Como importar uma fonte do Google Fonts no CSS?", ["@import url('fonts.google.com')", "@font-face", "@import url('fonts.googleapis.com')", "font-import"], 2)
    ],
    2: [
        ("Qual propriedade define o espa√ßamento interno?", ["margin", "padding", "border", "spacing"], 1),
        ("Como centralizar um elemento horizontalmente?", ["margin: 0 auto", "text-align: center", "center: true", "align: center"], 0),
        ("Qual √© a ordem correta do Box Model (de dentro para fora)?", ["content ‚Üí padding ‚Üí border ‚Üí margin", "margin ‚Üí border ‚Üí padding ‚Üí content", "padding ‚Üí content ‚Üí border ‚Üí margin", "content ‚Üí border ‚Üí padding ‚Üí margin"], 0),
        ("Como fazer um elemento ocupar toda a largura dispon√≠vel?", ["width: 100%", "width: full", "width: auto", "width: max"], 0),
        ("Qual valor de display faz o elemento desaparecer?", ["hidden", "invisible", "none", "transparent"], 2),
        ("Como definir uma altura m√≠nima de 300px?", ["height: 300px min", "min-height: 300px", "height-min: 300px", "minimum-height: 300px"], 1),
        ("Qual propriedade controla o espa√ßamento entre linhas?", ["line-spacing", "text-spacing", "line-height", "row-height"], 2),
        ("Como fazer bordas arredondadas?", ["border-curve", "border-radius", "border-round", "corner-radius"], 1)
    ],
    3: [
        ("Qual propriedade cria um container flex√≠vel?", ["display: flex", "flex: true", "layout: flex", "flexbox: on"], 0),
        ("Como distribuir espa√ßo igualmente entre itens flex?", ["justify-content: space-between", "align-items: center", "flex-wrap: wrap", "gap: 10px"], 0),
        ("Qual propriedade alinha itens no eixo cruzado do Flexbox?", ["justify-content", "align-items", "flex-align", "cross-align"], 1),
        ("Como fazer um item flex crescer para ocupar espa√ßo dispon√≠vel?", ["flex-grow: 1", "flex-expand: 1", "grow: 1", "expand: true"], 0),
        ("Qual propriedade permite quebra de linha em containers flex?", ["flex-wrap: wrap", "flex-break: wrap", "wrap: true", "line-break: flex"], 0),
        ("Como criar um grid com 3 colunas iguais?", ["grid-template-columns: 1fr 1fr 1fr", "grid-columns: 3", "columns: 3 equal", "grid: 3-columns"], 0),
        ("Qual propriedade define o espa√ßamento entre itens do grid?", ["grid-spacing", "gap", "grid-margin", "item-spacing"], 1),
        ("Como fazer um item ocupar 2 colunas no grid?", ["grid-column: span 2", "column-span: 2", "grid-width: 2", "columns: 2"], 0),
        ("Qual valor de justify-content centraliza itens horizontalmente?", ["center", "middle", "centered", "horizontal-center"], 0),
        ("Como criar um layout responsivo com Grid?", ["Usar fr e minmax()", "Usar apenas px", "Usar apenas %", "Usar apenas em"], 0)
    ]
}

# Quiz L√≥gica de Programa√ß√£o
quiz_logica = {
    1: [
        ("Qual √© a sequ√™ncia correta para resolver um problema?", ["Algoritmo ‚Üí C√≥digo ‚Üí Teste", "C√≥digo ‚Üí Algoritmo ‚Üí Teste", "Teste ‚Üí C√≥digo ‚Üí Algoritmo", "Algoritmo ‚Üí Teste ‚Üí C√≥digo"], 0),
        ("Qual tipo de dado representa True/False?", ["Boolean", "String", "Integer", "Float"], 0)
    ],
    2: [
        ("Qual estrutura executa c√≥digo apenas se uma condi√ß√£o for verdadeira?", ["if", "for", "while", "def"], 0),
        ("Como criar um loop que executa 5 vezes?", ["for i in range(5)", "while i < 5", "if i == 5", "loop 5 times"], 0)
    ],
    3: [
        ("Como adicionar um item ao final de uma lista?", ["lista.append(item)", "lista.add(item)", "lista.insert(item)", "lista.push(item)"], 0),
        ("Qual palavra-chave define uma fun√ß√£o?", ["def", "function", "func", "define"], 0)
    ]
}

def fazer_quiz_css(quiz_css, biblioteca):
    tentativas = 0
    max_tentativas = 3
    nota_minima = 70
    
    while tentativas < max_tentativas:
        tentativas += 1
        print(f"\nüéØ AVALIA√á√ÉO CSS - TENTATIVA {tentativas}/{max_tentativas}")
        print("=" * 50)
        
        # Selecionar 2 perguntas de cada cap√≠tulo (6 perguntas total)
        perguntas_selecionadas = []
        capitulos_com_erro = []
        
        for capitulo in range(1, 4):  # 3 cap√≠tulos
            perguntas_capitulo = quiz_css[capitulo].copy()
            random.shuffle(perguntas_capitulo)
            perguntas_selecionadas.extend(perguntas_capitulo[:2])
        
        random.shuffle(perguntas_selecionadas)
        
        acertos = 0
        total_perguntas = len(perguntas_selecionadas)
        
        for i, (pergunta, opcoes, resposta_correta) in enumerate(perguntas_selecionadas, 1):
            print(f"\nüìù PERGUNTA {i}:")
            print(pergunta)
            
            for j, opcao in enumerate(opcoes):
                print(f"{j + 1}. {opcao}")
            
            try:
                resposta_usuario = int(input("Sua resposta (1-4): ")) - 1
                
                if resposta_usuario == resposta_correta:
                    print("‚úÖ CORRETO!")
                    acertos += 1
                else:
                    print(f"‚ùå INCORRETO! A resposta correta √©: {opcoes[resposta_correta]}")
                    # Identificar cap√≠tulo com erro
                    for cap in range(1, 4):
                        if (pergunta, opcoes, resposta_correta) in quiz_css[cap]:
                            if cap not in capitulos_com_erro:
                                capitulos_com_erro.append(cap)
                            break
                            
            except (ValueError, IndexError):
                print("‚ùå RESPOSTA INV√ÅLIDA! Considerando como erro.")
                for cap in range(1, 4):
                    if (pergunta, opcoes, resposta_correta) in quiz_css[cap]:
                        if cap not in capitulos_com_erro:
                            capitulos_com_erro.append(cap)
                        break
        
        # Calcular nota
        nota = (acertos / total_perguntas) * 100
        print(f"\nüìä RESULTADO:")
        print(f"Acertos: {acertos}/{total_perguntas}")
        print(f"Nota: {nota:.1f}%")
        
        if nota >= nota_minima:
            print("üéâ PARAB√âNS! VOC√ä FOI APROVADO!")
            break
        else:
            print(f"üìö Voc√™ precisa de pelo menos {nota_minima}% para ser aprovado.")
            
            if tentativas < max_tentativas:
                print("\nüéØ PLANO DE REFOR√áO PERSONALIZADO:")
                
                recursos_css = {
                    1: {
                        "sites": [
                            "https://developer.mozilla.org/pt-BR/docs/Web/CSS",
                            "https://www.w3schools.com/css/css_intro.asp",
                            "https://css-tricks.com/almanac/",
                            "https://cssreference.io/",
                            "https://www.freecodecamp.org/news/css-selectors-cheat-sheet/",
                            "https://specificity.keegan.st/",
                            "https://flukeout.github.io/",
                            "https://www.codecademy.com/learn/learn-css"
                        ],
                        "videos": [
                            "Pesquise: 'CSS b√°sico para iniciantes' no YouTube",
                            "Pesquise: 'CSS seletores tutorial completo' no YouTube",
                            "Pesquise: 'CSS especificidade explicada' no YouTube",
                            "Pesquise: 'CSS externo interno inline diferen√ßas' no YouTube",
                            "Pesquise: 'CSS cores e fontes tutorial' no YouTube",
                            "Pesquise: 'CSS media queries responsivo' no YouTube"
                        ],
                        "praticas": [
                            "Crie uma p√°gina com CSS externo aplicando diferentes seletores",
                            "Desenvolva um sistema de cores consistente para um site",
                            "Fa√ßa uma p√°gina responsiva usando media queries",
                            "Crie um menu de navega√ß√£o estilizado com CSS",
                            "Desenvolva uma galeria de imagens com hover effects"
                        ]
                    },
                    2: {
                        "sites": [
                            "https://developer.mozilla.org/pt-BR/docs/Web/CSS/CSS_Box_Model",
                            "https://www.w3schools.com/css/css_boxmodel.asp",
                            "https://css-tricks.com/the-css-box-model/",
                            "https://internetingishard.com/html-and-css/css-box-model/",
                            "https://www.codecademy.com/resources/docs/css/box-model",
                            "https://boxmodel.com/",
                            "https://web.dev/learn/css/box-model/",
                            "https://cssreference.io/box-model/"
                        ],
                        "videos": [
                            "Pesquise: 'CSS Box Model explicado detalhadamente' no YouTube",
                            "Pesquise: 'CSS margin padding border diferen√ßas' no YouTube",
                            "Pesquise: 'CSS centralizar elementos tutorial' no YouTube",
                            "Pesquise: 'CSS display block inline inline-block' no YouTube",
                            "Pesquise: 'CSS position absolute relative fixed' no YouTube",
                            "Pesquise: 'CSS width height min-max tutorial' no YouTube"
                        ],
                        "praticas": [
                            "Crie cards com diferentes espa√ßamentos usando box model",
                            "Desenvolva um layout com elementos centralizados",
                            "Fa√ßa uma p√°gina com diferentes tipos de display",
                            "Crie um sistema de grid simples usando float",
                            "Desenvolva uma sidebar fixa com position"
                        ]
                    },
                    3: {
                        "sites": [
                            "https://css-tricks.com/snippets/css/a-guide-to-flexbox/",
                            "https://developer.mozilla.org/pt-BR/docs/Web/CSS/CSS_Flexible_Box_Layout",
                            "https://flexboxfroggy.com/",
                            "https://css-tricks.com/snippets/css/complete-guide-grid/",
                            "https://cssgridgarden.com/",
                            "https://gridbyexample.com/",
                            "https://www.w3schools.com/css/css3_flexbox.asp",
                            "https://flexbox.malven.co/"
                        ],
                        "videos": [
                            "Pesquise: 'CSS Flexbox tutorial completo' no YouTube",
                            "Pesquise: 'CSS Grid layout do zero' no YouTube",
                            "Pesquise: 'Flexbox vs Grid quando usar' no YouTube",
                            "Pesquise: 'CSS Flexbox justify-content align-items' no YouTube",
                            "Pesquise: 'CSS Grid template areas tutorial' no YouTube",
                            "Pesquise: 'Layout responsivo com Flexbox e Grid' no YouTube"
                        ],
                        "praticas": [
                            "Crie uma navbar responsiva com Flexbox",
                            "Desenvolva um layout de p√°gina completo com CSS Grid",
                            "Fa√ßa uma galeria de fotos usando Flexbox",
                            "Crie um dashboard com Grid template areas",
                            "Desenvolva um sistema de cards responsivo com Flexbox"
                        ]
                    }
                }
                
                plano_reforco = []
                tempo_estudo = len(capitulos_com_erro) * 30
                
                for capitulo in capitulos_com_erro:
                    recursos_cap = recursos_css[capitulo]
                    
                    # Seleciona 2-3 sites aleat√≥rios
                    sites_selecionados = random.sample(recursos_cap["sites"], min(3, len(recursos_cap["sites"])))
                    plano_reforco.append("üåê Sites para estudar:")
                    for site in sites_selecionados:
                        plano_reforco.append(f"   ‚Ä¢ {site}")
                    
                    # Seleciona 2-3 v√≠deos aleat√≥rios
                    videos_selecionados = random.sample(recursos_cap["videos"], min(3, len(recursos_cap["videos"])))
                    plano_reforco.append("üé• V√≠deos:")
                    for video in videos_selecionados:
                        plano_reforco.append(f"   ‚Ä¢ {video}")
                    
                    # Seleciona 1-2 pr√°ticas aleat√≥rias
                    praticas_selecionadas = random.sample(recursos_cap["praticas"], min(2, len(recursos_cap["praticas"])))
                    plano_reforco.append("‚úèÔ∏è Pr√°ticas recomendadas:")
                    for pratica in praticas_selecionadas:
                        plano_reforco.append(f"   ‚Ä¢ {pratica}")
                
                random.shuffle(plano_reforco)
                
                print(f"‚è∞ Tempo de estudo recomendado: {tempo_estudo} minutos")
                print("üìã Recursos recomendados:")
                for item in plano_reforco:
                    print(f"   {item}")
                
                print(f"\nüîÑ Voc√™ ainda tem {max_tentativas - tentativas} tentativa(s).")
                continuar = input("Deseja tentar novamente ap√≥s estudar? (s/n): ").lower()
                if continuar != 's':
                    break
            else:
                print("‚ùå VOC√ä ESGOTOU SUAS TENTATIVAS. PROCURE SEU MENTOR PARA ORIENTA√á√ÉO.")

def fazer_quiz_logica(quiz_logica, biblioteca):
    tentativas = 0
    max_tentativas = 3
    nota_minima = 70
    
    while tentativas < max_tentativas:
        tentativas += 1
        print(f"\nüéØ AVALIA√á√ÉO L√ìGICA DE PROGRAMA√á√ÉO - TENTATIVA {tentativas}/{max_tentativas}")
        print("=" * 60)
        
        # Selecionar 2 perguntas de cada cap√≠tulo (6 perguntas total)
        perguntas_selecionadas = []
        capitulos_com_erro = []
        
        for capitulo in range(1, 4):  # 3 cap√≠tulos
            perguntas_capitulo = quiz_logica[capitulo].copy()
            random.shuffle(perguntas_capitulo)
            perguntas_selecionadas.extend(perguntas_capitulo[:2])
        
        random.shuffle(perguntas_selecionadas)
        
        acertos = 0
        total_perguntas = len(perguntas_selecionadas)
        
        for i, (pergunta, opcoes, resposta_correta) in enumerate(perguntas_selecionadas, 1):
            print(f"\nüìù PERGUNTA {i}:")
            print(pergunta)
            
            for j, opcao in enumerate(opcoes):
                print(f"{j + 1}. {opcao}")
            
            try:
                resposta_usuario = int(input("Sua resposta (1-4): ")) - 1
                
                if resposta_usuario == resposta_correta:
                    print("‚úÖ CORRETO!")
                    acertos += 1
                else:
                    print(f"‚ùå INCORRETO! A resposta correta √©: {opcoes[resposta_correta]}")
                    # Identificar cap√≠tulo com erro
                    for cap in range(1, 4):
                        if (pergunta, opcoes, resposta_correta) in quiz_logica[cap]:
                            if cap not in capitulos_com_erro:
                                capitulos_com_erro.append(cap)
                            break
                            
            except (ValueError, IndexError):
                print("‚ùå RESPOSTA INV√ÅLIDA! Considerando como erro.")
                for cap in range(1, 4):
                    if (pergunta, opcoes, resposta_correta) in quiz_logica[cap]:
                        if cap not in capitulos_com_erro:
                            capitulos_com_erro.append(cap)
                        break
        
        # Calcular nota
        nota = (acertos / total_perguntas) * 100
        print(f"\nüìä RESULTADO:")
        print(f"Acertos: {acertos}/{total_perguntas}")
        print(f"Nota: {nota:.1f}%")
        
        if nota >= nota_minima:
            print("üéâ PARAB√âNS! VOC√ä FOI APROVADO!")
            break
        else:
            print(f"üìö Voc√™ precisa de pelo menos {nota_minima}% para ser aprovado.")
            
            if tentativas < max_tentativas:
                print("\nüéØ PLANO DE REFOR√áO PERSONALIZADO:")
                
                recursos_logica = {
                    1: {
                        "sites": [
                            "https://www.codecademy.com/learn/learn-python-3",
                            "https://www.w3schools.com/python/python_intro.asp",
                            "https://docs.python.org/pt-br/3/tutorial/",
                            "https://penseallen.github.io/PensePython2e/",
                            "https://python.org.br/introducao/",
                            "https://www.freecodecamp.org/learn/scientific-computing-with-python/",
                            "https://algoritmosempython.com.br/",
                            "https://www.programiz.com/python-programming"
                        ],
                        "videos": [
                            "Pesquise: 'L√≥gica de programa√ß√£o para iniciantes' no YouTube",
                            "Pesquise: 'Algoritmos e fluxogramas tutorial' no YouTube",
                            "Pesquise: 'Vari√°veis e tipos de dados Python' no YouTube",
                            "Pesquise: 'Operadores aritm√©ticos relacionais l√≥gicos' no YouTube",
                            "Pesquise: 'Como pensar como programador' no YouTube",
                            "Pesquise: 'Pseudoc√≥digo e algoritmos b√°sicos' no YouTube"
                        ],
                        "praticas": [
                            "Crie algoritmos simples no papel antes de programar",
                            "Desenvolva uma calculadora b√°sica com 4 opera√ß√µes",
                            "Fa√ßa um programa que converte temperaturas",
                            "Crie um algoritmo para calcular m√©dia de notas",
                            "Desenvolva um programa que determina se um n√∫mero √© par ou √≠mpar"
                        ]
                    },
                    2: {
                        "sites": [
                            "https://docs.python.org/pt-br/3/tutorial/controlflow.html",
                            "https://www.w3schools.com/python/python_conditions.asp",
                            "https://www.programiz.com/python-programming/if-elif-else",
                            "https://realpython.com/python-conditional-statements/",
                            "https://www.codecademy.com/learn/learn-python-3/modules/learn-python3-control-flow",
                            "https://penseallen.github.io/PensePython2e/05-cond-recur.html",
                            "https://python.org.br/introducao/#estruturas-de-controle",
                            "https://www.tutorialspoint.com/python/python_loops.htm"
                        ],
                        "videos": [
                            "Pesquise: 'Python if else elif tutorial completo' no YouTube",
                            "Pesquise: 'Python for while loops explicados' no YouTube",
                            "Pesquise: 'Estruturas condicionais Python exemplos' no YouTube",
                            "Pesquise: 'Python break continue pass comandos' no YouTube",
                            "Pesquise: 'La√ßos de repeti√ß√£o Python pr√°tica' no YouTube",
                            "Pesquise: 'Python range fun√ß√£o tutorial' no YouTube"
                        ],
                        "praticas": [
                            "Crie um sistema de notas com m√∫ltiplas condi√ß√µes",
                            "Desenvolva um programa de menu com while loop",
                            "Fa√ßa um jogo de adivinha√ß√£o de n√∫meros",
                            "Crie uma tabuada usando for loop",
                            "Desenvolva um validador de senha com condi√ß√µes"
                        ]
                    },
                    3: {
                        "sites": [
                            "https://docs.python.org/pt-br/3/tutorial/datastructures.html",
                            "https://www.w3schools.com/python/python_lists.asp",
                            "https://realpython.com/python-lists-tuples/",
                            "https://www.programiz.com/python-programming/list",
                            "https://docs.python.org/pt-br/3/tutorial/controlflow.html#defining-functions",
                            "https://www.codecademy.com/learn/learn-python-3/modules/learn-python3-functions",
                            "https://penseallen.github.io/PensePython2e/03-funcoes.html",
                            "https://python.org.br/introducao/#estruturas-de-dados"
                        ],
                        "videos": [
                            "Pesquise: 'Python listas tutorial completo' no YouTube",
                            "Pesquise: 'Python dicion√°rios explicados' no YouTube",
                            "Pesquise: 'Python fun√ß√µes def return' no YouTube",
                            "Pesquise: 'Python estruturas de dados pr√°ticas' no YouTube",
                            "Pesquise: 'Python m√©todos de lista append remove' no YouTube",
                            "Pesquise: 'Python par√¢metros argumentos fun√ß√µes' no YouTube"
                        ],
                        "praticas": [
                            "Crie um sistema de cadastro completo com listas",
                            "Desenvolva fun√ß√µes que manipulam listas e dicion√°rios",
                            "Fa√ßa um programa de agenda de contatos",
                            "Crie um sistema de estoque com fun√ß√µes",
                            "Desenvolva um jogo da forca usando listas"
                        ]
                    }
                }
                
                plano_reforco = []
                tempo_estudo = len(capitulos_com_erro) * 45
                
                for capitulo in capitulos_com_erro:
                    recursos_cap = recursos_logica[capitulo]
                    
                    # Seleciona 2-3 sites aleat√≥rios
                    sites_selecionados = random.sample(recursos_cap["sites"], min(3, len(recursos_cap["sites"])))
                    plano_reforco.append("üåê Sites para estudar:")
                    for site in sites_selecionados:
                        plano_reforco.append(f"   ‚Ä¢ {site}")
                    
                    # Seleciona 2-3 v√≠deos aleat√≥rios
                    videos_selecionados = random.sample(recursos_cap["videos"], min(3, len(recursos_cap["videos"])))
                    plano_reforco.append("üé• V√≠deos:")
                    for video in videos_selecionados:
                        plano_reforco.append(f"   ‚Ä¢ {video}")
                    
                    # Seleciona 1-2 pr√°ticas aleat√≥rias
                    praticas_selecionadas = random.sample(recursos_cap["praticas"], min(2, len(recursos_cap["praticas"])))
                    plano_reforco.append("‚úèÔ∏è Pr√°ticas recomendadas:")
                    for pratica in praticas_selecionadas:
                        plano_reforco.append(f"   ‚Ä¢ {pratica}")
                
                random.shuffle(plano_reforco)
                
                print(f"‚è∞ Tempo de estudo recomendado: {tempo_estudo} minutos")
                print("üìã Recursos recomendados:")
                for item in plano_reforco:
                    print(f"   {item}")
                
                print(f"\nüîÑ Voc√™ ainda tem {max_tentativas - tentativas} tentativa(s).")
                continuar = input("Deseja tentar novamente ap√≥s estudar? (s/n): ").lower()
                if continuar != 's':
                    break
            else:
                print("‚ùå VOC√ä ESGOTOU SUAS TENTATIVAS. PROCURE SEU MENTOR PARA ORIENTA√á√ÉO.")

def unitech():
    print("BEM-VINDO AO UNITECH\n")

    while True:  # Loop principal para permitir mudan√ßa de curso
        # Lista de cursos
        cursos = ["HTML", "CSS", "L√ìGICA DE PROGRAMA√á√ÉO"]

        print("CURSOS DISPON√çVEIS:")
        for i, curso in enumerate(cursos, start=1):
            print(f"{i} - {curso}")
        
        try:
            opcao = int(input("SELECIONE O N√öMERO DO CURSO: "))
            if 1 <= opcao <= len(cursos):
                curso = cursos[opcao - 1]
                print(f"\nVOC√ä ESCOLHEU: {curso}\n")
                break
            else:
                print("‚ùå Op√ß√£o inv√°lida. Escolha um n√∫mero de 1 a 3.")
        except ValueError:
            print("‚ùå Digite apenas n√∫meros de 1 a 3.")

    # Cap√≠tulos e conte√∫dos de cada curso
    biblioteca = {}
    
    # Quiz de HTML - Perguntas por cap√≠tulo
    quiz_html = {
        1: [
            {"pergunta": "Qual tag declara que o documento √© HTML5?", 
             "opcoes": ["A) <html5>", "B) <!DOCTYPE html>", "C) <doctype>", "D) <version>"], 
             "resposta": "B", "capitulo": 1},
            {"pergunta": "Onde ficam os metadados de uma p√°gina HTML?", 
             "opcoes": ["A) <body>", "B) <footer>", "C) <head>", "D) <meta>"], 
             "resposta": "C", "capitulo": 1},
            {"pergunta": "Qual atributo define o idioma do documento?", 
             "opcoes": ["A) language", "B) lang", "C) idioma", "D) locale"], 
             "resposta": "B", "capitulo": 1}
        ],
        2: [
            {"pergunta": "Qual tag representa o cabe√ßalho de uma p√°gina?", 
             "opcoes": ["A) <head>", "B) <header>", "C) <top>", "D) <title>"], 
             "resposta": "B", "capitulo": 2},
            {"pergunta": "A tag <main> deve aparecer quantas vezes por documento?", 
             "opcoes": ["A) V√°rias vezes", "B) Duas vezes", "C) Uma vez", "D) Nenhuma"], 
             "resposta": "C", "capitulo": 2},
            {"pergunta": "Qual tag √© usada para conte√∫do complementar?", 
             "opcoes": ["A) <side>", "B) <aside>", "C) <extra>", "D) <complement>"], 
             "resposta": "B", "capitulo": 2}
        ],
        3: [
            {"pergunta": "Qual tag cria um campo de texto em formul√°rios?", 
             "opcoes": ["A) <text>", "B) <field>", "C) <input>", "D) <textbox>"], 
             "resposta": "C", "capitulo": 3},
            {"pergunta": "Qual atributo define o tipo de um input?", 
             "opcoes": ["A) kind", "B) type", "C) format", "D) style"], 
             "resposta": "B", "capitulo": 3}
        ],
        4: [
            {"pergunta": "Qual tag cria uma lista n√£o ordenada?", 
             "opcoes": ["A) <ol>", "B) <list>", "C) <ul>", "D) <unordered>"], 
             "resposta": "C", "capitulo": 4},
            {"pergunta": "Qual atributo do link abre em nova aba?", 
             "opcoes": ["A) new='true'", "B) target='_blank'", "C) open='new'", "D) window='new'"], 
             "resposta": "B", "capitulo": 4},
            {"pergunta": "Qual tag define um item de lista?", 
             "opcoes": ["A) <item>", "B) <li>", "C) <list-item>", "D) <element>"], 
             "resposta": "B", "capitulo": 4}
        ],
        5: [
            {"pergunta": "Qual atributo √© obrigat√≥rio na tag <img>?", 
             "opcoes": ["A) width", "B) height", "C) alt", "D) title"], 
             "resposta": "C", "capitulo": 5},
            {"pergunta": "Qual tag adiciona legenda a uma imagem?", 
             "opcoes": ["A) <caption>", "B) <figcaption>", "C) <legend>", "D) <label>"], 
             "resposta": "B", "capitulo": 5},
            {"pergunta": "Qual tag reproduz √°udio na p√°gina?", 
             "opcoes": ["A) <sound>", "B) <music>", "C) <audio>", "D) <media>"], 
             "resposta": "C", "capitulo": 5}
        ],
        6: [
            {"pergunta": "Qual tag cria uma c√©lula de cabe√ßalho em tabelas?", 
             "opcoes": ["A) <td>", "B) <th>", "C) <header>", "D) <head-cell>"], 
             "resposta": "B", "capitulo": 6},
            {"pergunta": "Qual tag agrupa o corpo principal de uma tabela?", 
             "opcoes": ["A) <body>", "B) <table-body>", "C) <tbody>", "D) <main>"], 
             "resposta": "C", "capitulo": 6},
            {"pergunta": "Qual tag cria uma linha de tabela?", 
             "opcoes": ["A) <row>", "B) <tr>", "C) <line>", "D) <table-row>"], 
             "resposta": "B", "capitulo": 6}
        ]
    }
    
    if curso == "HTML":
        biblioteca = {
            1: ("CAP√çTULO 1 - ESTRUTURA B√ÅSICA DE UM DOCUMENTO HTML", 
                "Um documento HTML √© a base de qualquer p√°gina web e possui uma estrutura definida que organiza \n "
                "o conte√∫do e os metadados de forma l√≥gica e acess√≠vel. Esta estrutura b√°sica √© composta por uma \n "
                "s√©rie de elementos que devem ser organizados corretamente para garantir que a p√°gina seja exibida \n "
                "corretamente pelos navegadores.\n\n"
                "Exemplo de estrutura b√°sica:\n\n"
                "<!DOCTYPE html>\n"
                "<html lang='pt-br'>\n"
                "  <head>\n"
                "    <meta charset='UTF-8'>\n"
                "    <meta name='viewport' content='width=device-width, initial-scale=1.0'>\n"
                "    <title>T√≠tulo do Documento</title>\n"
                "  </head>\n"
                "  <body>\n"
                "    Corpo do Documento\n"
                "  </body>\n"
                "</html>\n\n"
                "Explica√ß√£o das principais tags:\n"
                "- <!DOCTYPE html> ‚Üí Informa ao navegador que o documento est√° usando HTML5.\n"
                "- <html lang='pt-br'> ‚Üí Indica o idioma principal do documento.\n"
                "- <head> </head> ‚Üí Delimita o cabe√ßalho, onde ficam metadados e configura√ß√µes.\n"
                "- <meta charset='UTF-8'> ‚Üí Define o conjunto de caracteres usado no documento.\n"
                "- <meta name='viewport'...> ‚Üí Garante que o site seja exibido corretamente em dispositivos m√≥veis.\n"
                "- <title> </title> ‚Üí Define o t√≠tulo da p√°gina (aparece na aba do navegador).\n"
                "- <body> </body> ‚Üí Cont√©m todo o conte√∫do vis√≠vel da p√°gina.\n\n"
                "Agora que voc√™ conhece a estrutura b√°sica de um documento HTML, pode come√ßar a entender as "
                "diversas tags que comp√µem uma p√°gina."),
            2: ("CAP√çTULO 2 - TAGS B√ÅSICAS",
                "As tags estruturais s√£o usadas para organizar o conte√∫do de uma p√°gina HTML de forma sem√¢ntica, "
                "facilitando a leitura para os navegadores, mecanismos de busca e leitores de tela. Elas ajudam a "
                "dividir o conte√∫do em se√ß√µes l√≥gicas.\n\n"
                "Principais tags estruturais:\n"
                "- <header> ‚Üí Representa o cabe√ßalho de uma p√°gina ou se√ß√£o. Geralmente cont√©m logo, t√≠tulo e menus.\n"
                "- <nav> ‚Üí Define a √°rea de navega√ß√£o, como menus e links importantes.\n"
                "- <main> ‚Üí Indica o conte√∫do principal da p√°gina, √∫nico por documento.\n"
                "- <section> ‚Üí Agrupa conte√∫do relacionado em se√ß√µes.\n"
                "- <article> ‚Üí Representa um conte√∫do independente, como uma postagem de blog ou not√≠cia.\n"
                "- <aside> ‚Üí Usado para conte√∫dos laterais ou complementares, como uma barra lateral.\n"
                "- <footer> ‚Üí Representa o rodap√© da p√°gina ou se√ß√£o, geralmente cont√©m cr√©ditos e informa√ß√µes de contato.\n\n"
                "Exemplo de uso:\n\n"
                "<!DOCTYPE html>\n"
                "<html lang='pt-br'>\n"
                "  <head>\n"
                "    <meta charset='UTF-8'>\n"
                "    <title>Exemplo Estrutural</title>\n"
                "  </head>\n"
                "  <body>\n"
                "    <header>\n"
                "      <h1>Meu Site</h1>\n"
                "      <nav>\n"
                "        <a href='#'>Home</a> | <a href='#'>Sobre</a> | <a href='#'>Contato</a>\n"
                "      </nav>\n"
                "    </header>\n"
                "    <main>\n"
                "      <section>\n"
                "        <article>\n"
                "          <h2>Not√≠cia Importante</h2>\n"
                "          <p>Este √© o conte√∫do da not√≠cia...</p>\n"
                "        </article>\n"
                "      </section>\n"
                "      <aside>\n"
                "        <p>Conte√∫do complementar, como links ou an√∫ncios.</p>\n"
                "      </aside>\n"
                "    </main>\n"
                "    <footer>\n"
                "      <p>&copy; 2025 - Meu Site</p>\n"
                "    </footer>\n"
                "  </body>\n"
                "</html>\n\n"
                "Observa√ß√£o: Utilizar essas tags de forma correta melhora a acessibilidade e o SEO (otimiza√ß√£o para mecanismos de busca), "
                "al√©m de deixar o c√≥digo mais organizado e f√°cil de manter."),
            3: ("CAP√çTULO 3 - FORMUL√ÅRIOS",
                "Os formul√°rios s√£o elementos essenciais para intera√ß√£o do usu√°rio com p√°ginas web. "
                "Eles permitem coletar informa√ß√µes, realizar cadastros, fazer login e muito mais.\n\n"
                "ESTRUTURA B√ÅSICA DE UM FORMUL√ÅRIO:\n"
                "<form action='processar.php' method='post'>\n"
                "  <!-- Campos do formul√°rio aqui -->\n"
                "</form>\n\n"
                "PRINCIPAIS TIPOS DE INPUT:\n\n"
                "1. CAMPO DE TEXTO:\n"
                "<input type='text' name='nome' placeholder='Digite seu nome' required>\n\n"
                "2. EMAIL:\n"
                "<input type='email' name='email' placeholder='seu@email.com' required>\n\n"
                "3. SENHA:\n"
                "<input type='password' name='senha' placeholder='Sua senha' required>\n\n"
                "4. N√öMERO:\n"
                "<input type='number' name='idade' min='18' max='100' placeholder='Idade'>\n\n"
                "5. DATA:\n"
                "<input type='date' name='nascimento'>\n\n"
                "6. TELEFONE:\n"
                "<input type='tel' name='telefone' placeholder='(11) 99999-9999'>\n\n"
                "7. CHECKBOX (m√∫ltipla escolha):\n"
                "<input type='checkbox' name='hobbies' value='leitura'> Leitura\n"
                "<input type='checkbox' name='hobbies' value='esportes'> Esportes\n\n"
                "8. RADIO BUTTON (escolha √∫nica):\n"
                "<input type='radio' name='genero' value='masculino'> Masculino\n"
                "<input type='radio' name='genero' value='feminino'> Feminino\n\n"
                "ELEMENTOS AVAN√áADOS:\n\n"
                "9. SELECT (lista suspensa):\n"
                "<select name='cidade'>\n"
                "  <option value=''>Escolha uma cidade</option>\n"
                "  <option value='sp'>S√£o Paulo</option>\n"
                "  <option value='rj'>Rio de Janeiro</option>\n"
                "</select>\n\n"
                "10. TEXTAREA (texto longo):\n"
                "<textarea name='mensagem' rows='5' cols='30' placeholder='Sua mensagem'></textarea>\n\n"
                "11. BOT√ïES:\n"
                "<button type='submit'>Enviar</button>\n"
                "<button type='reset'>Limpar</button>\n"
                "<input type='submit' value='Cadastrar'>\n\n"
                "EXEMPLO COMPLETO - FORMUL√ÅRIO DE CONTATO:\n\n"
                "<form action='contato.php' method='post'>\n"
                "  <fieldset>\n"
                "    <legend>Dados Pessoais</legend>\n"
                "    \n"
                "    <label for='nome'>Nome Completo:</label>\n"
                "    <input type='text' id='nome' name='nome' required>\n"
                "    \n"
                "    <label for='email'>E-mail:</label>\n"
                "    <input type='email' id='email' name='email' required>\n"
                "    \n"
                "    <label for='telefone'>Telefone:</label>\n"
                "    <input type='tel' id='telefone' name='telefone'>\n"
                "  </fieldset>\n"
                "  \n"
                "  <fieldset>\n"
                "    <legend>Prefer√™ncias</legend>\n"
                "    \n"
                "    <label for='assunto'>Assunto:</label>\n"
                "    <select id='assunto' name='assunto'>\n"
                "      <option value='duvida'>D√∫vida</option>\n"
                "      <option value='sugestao'>Sugest√£o</option>\n"
                "      <option value='reclamacao'>Reclama√ß√£o</option>\n"
                "    </select>\n"
                "    \n"
                "    <label>Contato preferido:</label>\n"
                "    <input type='radio' id='email_pref' name='contato' value='email'>\n"
                "    <label for='email_pref'>E-mail</label>\n"
                "    \n"
                "    <input type='radio' id='tel_pref' name='contato' value='telefone'>\n"
                "    <label for='tel_pref'>Telefone</label>\n"
                "  </fieldset>\n"
                "  \n"
                "  <label for='mensagem'>Mensagem:</label>\n"
                "  <textarea id='mensagem' name='mensagem' rows='5' required></textarea>\n"
                "  \n"
                "  <input type='checkbox' id='newsletter' name='newsletter'>\n"
                "  <label for='newsletter'>Desejo receber newsletter</label>\n"
                "  \n"
                "  <button type='submit'>Enviar Mensagem</button>\n"
                "  <button type='reset'>Limpar Formul√°rio</button>\n"
                "</form>\n\n"
                "ATRIBUTOS IMPORTANTES:\n"
                "- required: torna o campo obrigat√≥rio\n"
                "- placeholder: texto de exemplo no campo\n"
                "- maxlength: limite de caracteres\n"
                "- min/max: valores m√≠nimo e m√°ximo para n√∫meros\n"
                "- pattern: valida√ß√£o com express√£o regular\n"
                "- disabled: desabilita o campo\n"
                "- readonly: campo apenas para leitura\n\n"
                "DICAS DE ACESSIBILIDADE:\n"
                "- Use <label> para todos os campos\n"
                "- Agrupe campos relacionados com <fieldset> e <legend>\n"
                "- Forne√ßa instru√ß√µes claras\n"
                "- Use atributos de valida√ß√£o HTML5\n\n"
                "Os formul√°rios s√£o fundamentais para criar interatividade e coletar dados dos usu√°rios de forma organizada e acess√≠vel."),
            4: ("CAP√çTULO 4 - LISTAS E LINKS",
                "Neste cap√≠tulo, voc√™ aprender√° a criar listas e links para estruturar informa√ß√µes e navega√ß√£o.\n\n"
                "LISTAS:\n"
                "1. Lista n√£o ordenada (<ul>):\n"
                "<ul>\n"
                "  <li>Item 1</li>\n"
                "  <li>Item 2</li>\n"
                "  <li>Item 3</li>\n"
                "</ul>\n\n"
                "2. Lista ordenada (<ol>):\n"
                "<ol>\n"
                "  <li>Primeiro passo</li>\n"
                "  <li>Segundo passo</li>\n"
                "  <li>Terceiro passo</li>\n"
                "</ol>\n\n"
                "3. Lista de defini√ß√£o (<dl>):\n"
                "<dl>\n"
                "  <dt>HTML</dt>\n"
                "  <dd>Linguagem de marca√ß√£o para p√°ginas web.</dd>\n"
                "</dl>\n\n"
                "LINKS:\n"
                "<a href='https://www.unip.br/cursos/graduacao/index.aspx' target='_blank'>Visite nosso site</a>\n"
                "- href: destino do link\n"
                "- target='_blank': abre em nova aba\n\n"
                "Exemplo pr√°tico:\n"
                "<ul>\n"
                "  <li><a href='index.html'>P√°gina Inicial</a></li>\n"
                "  <li><a href='sobre.html'>Sobre</a></li>\n"
                "  <li><a href='contato.html' target='_blank'>Contato</a></li>\n"
                "</ul>"),
            5: ("CAP√çTULO 5 - IMAGENS E MULTIM√çDIA",
                "Aqui veremos como adicionar imagens, √°udio e v√≠deo em uma p√°gina HTML.\n\n"
                "IMAGENS:\n"
                "<img src='imagem.jpg' alt='Descri√ß√£o' width='300'>\n\n"
                "√ÅUDIO:\n"
                "<audio controls>\n"
                "  <source src='musica.mp3' type='audio/mpeg'>\n"
                "  Seu navegador n√£o suporta √°udio.\n"
                "</audio>\n\n"
                "V√çDEO:\n"
                "<video controls width='400'>\n"
                "  <source src='video.mp4' type='video/mp4'>\n"
                "  Seu navegador n√£o suporta v√≠deo.\n"
                "</video>\n\n"
                "FIGURA COM LEGENDA:\n"
                "<figure>\n"
                "  <img src='gato.png' alt='Gato fofo'>\n"
                "  <figcaption>Figura 1: Gato dormindo</figcaption>\n"
                "</figure>"),
            6: ("CAP√çTULO 6 - TABELAS",
                "Tabelas organizam informa√ß√µes em linhas e colunas.\n\n"
                "TABELA B√ÅSICA:\n"
                "<table border='1'>\n"
                "  <tr>\n"
                "    <th>Nome</th><th>Idade</th>\n"
                "  </tr>\n"
                "  <tr>\n"
                "    <td>Ana</td><td>25</td>\n"
                "  </tr>\n"
                "  <tr>\n"
                "    <td>Jo√£o</td><td>30</td>\n"
                "  </tr>\n"
                "</table>\n\n"
                "TABELA COM CABE√áALHO, CORPO E RODAP√â:\n"
                "<table border='1'>\n"
                "  <thead>\n"
                "    <tr><th>Produto</th><th>Pre√ßo</th></tr>\n"
                "  </thead>\n"
                "  <tbody>\n"
                "    <tr><td>Mouse</td><td>R$ 50,00</td></tr>\n"
                "    <tr><td>Teclado</td><td>R$ 80,00</td></tr>\n"
                "  </tbody>\n"
                "  <tfoot>\n"
                "    <tr><td>Total</td><td>R$ 130,00</td></tr>\n"
                "  </tfoot>\n"
                "</table>")
        }
        
    elif curso == "CSS":
        biblioteca = {
            1: ("CAP√çTULO 1 - INTRODU√á√ÉO AO CSS",
                "CSS (Cascading Style Sheets) √© a linguagem usada para estilizar p√°ginas HTML. "
                "Ela controla a apar√™ncia, layout e design dos elementos web.\n\n"
                "FORMAS DE APLICAR CSS:\n\n"
                "1. CSS INLINE (dentro da tag):\n"
                "<p style='color: blue; font-size: 18px;'>Texto azul</p>\n\n"
                "2. CSS INTERNO (na tag <style>):\n"
                "<style>\n"
                "  p { color: blue; font-size: 18px; }\n"
                "</style>\n\n"
                "3. CSS EXTERNO (arquivo separado):\n"
                "<link rel='stylesheet' href='estilo.css'>\n\n"
                "SELETORES B√ÅSICOS:\n\n"
                "‚Ä¢ Seletor de elemento: p { color: red; }\n"
                "‚Ä¢ Seletor de classe: .destaque { font-weight: bold; }\n"
                "‚Ä¢ Seletor de ID: #titulo { font-size: 24px; }\n"
                "‚Ä¢ Seletor universal: * { margin: 0; }\n\n"
                "PROPRIEDADES FUNDAMENTAIS:\n\n"
                "CORES:\n"
                "color: red; /* cor do texto */\n"
                "background-color: #ff0000; /* cor de fundo */\n"
                "background-color: rgb(255, 0, 0); /* RGB */\n"
                "background-color: rgba(255, 0, 0, 0.5); /* com transpar√™ncia */\n\n"
                "TEXTO:\n"
                "font-family: Arial, sans-serif;\n"
                "font-size: 16px;\n"
                "font-weight: bold;\n"
                "text-align: center;\n"
                "text-decoration: underline;\n\n"
                "EXEMPLO PR√ÅTICO:\n\n"
                "HTML:\n"
                "<h1 class='titulo'>Meu Site</h1>\n"
                "<p id='introducao'>Bem-vindo ao meu site!</p>\n"
                "<p class='destaque'>Conte√∫do importante</p>\n\n"
                "CSS:\n"
                ".titulo {\n"
                "  color: #2c3e50;\n"
                "  font-family: 'Arial', sans-serif;\n"
                "  text-align: center;\n"
                "  margin-bottom: 20px;\n"
                "}\n\n"
                "#introducao {\n"
                "  font-size: 18px;\n"
                "  color: #7f8c8d;\n"
                "  line-height: 1.5;\n"
                "}\n\n"
                ".destaque {\n"
                "  background-color: #f39c12;\n"
                "  color: white;\n"
                "  padding: 10px;\n"
                "  border-radius: 5px;\n"
                "}"),
            2: ("CAP√çTULO 2 - BOX MODEL E LAYOUT",
                "O Box Model √© fundamental no CSS. Todo elemento HTML √© uma caixa com conte√∫do, "
                "padding, border e margin.\n\n"
                "ESTRUTURA DO BOX MODEL:\n"
                "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
                "‚îÇ           MARGIN                ‚îÇ\n"
                "‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ\n"
                "‚îÇ  ‚îÇ         BORDER              ‚îÇ ‚îÇ\n"
                "‚îÇ  ‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ ‚îÇ\n"
                "‚îÇ  ‚îÇ  ‚îÇ       PADDING           ‚îÇ ‚îÇ ‚îÇ\n"
                "‚îÇ  ‚îÇ  ‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ ‚îÇ ‚îÇ\n"
                "‚îÇ  ‚îÇ  ‚îÇ  ‚îÇ     CONTENT         ‚îÇ ‚îÇ ‚îÇ ‚îÇ\n"
                "‚îÇ  ‚îÇ  ‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ ‚îÇ ‚îÇ\n"
                "‚îÇ  ‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ ‚îÇ\n"
                "‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ\n"
                "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n"
                "PROPRIEDADES DO BOX MODEL:\n\n"
                "WIDTH E HEIGHT:\n"
                "width: 300px; /* largura */\n"
                "height: 200px; /* altura */\n"
                "max-width: 100%; /* largura m√°xima */\n"
                "min-height: 150px; /* altura m√≠nima */\n\n"
                "PADDING (espa√ßamento interno):\n"
                "padding: 20px; /* todos os lados */\n"
                "padding: 10px 20px; /* vertical horizontal */\n"
                "padding: 10px 15px 20px 25px; /* top right bottom left */\n"
                "padding-top: 10px; /* apenas topo */\n\n"
                "MARGIN (espa√ßamento externo):\n"
                "margin: 20px; /* todos os lados */\n"
                "margin: 0 auto; /* centralizar horizontalmente */\n"
                "margin-bottom: 30px; /* apenas embaixo */\n\n"
                "BORDER (borda):\n"
                "border: 2px solid #333; /* espessura estilo cor */\n"
                "border-radius: 10px; /* bordas arredondadas */\n"
                "border-top: 1px dashed red; /* apenas topo */\n\n"
                "DISPLAY:\n"
                "display: block; /* elemento em bloco */\n"
                "display: inline; /* elemento em linha */\n"
                "display: inline-block; /* h√≠brido */\n"
                "display: none; /* ocultar elemento */\n\n"
                "POSITION:\n"
                "position: static; /* padr√£o */\n"
                "position: relative; /* relativo √† posi√ß√£o original */\n"
                "position: absolute; /* relativo ao pai posicionado */\n"
                "position: fixed; /* fixo na tela */\n"
                "top: 10px; left: 20px; /* coordenadas */\n\n"
                "EXEMPLO PR√ÅTICO - CARD:\n\n"
                ".card {\n"
                "  width: 300px;\n"
                "  background-color: white;\n"
                "  border: 1px solid #ddd;\n"
                "  border-radius: 8px;\n"
                "  padding: 20px;\n"
                "  margin: 20px auto;\n"
                "  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n"
                "}\n\n"
                ".card h3 {\n"
                "  margin-top: 0;\n"
                "  color: #333;\n"
                "}\n\n"
                ".card p {\n"
                "  line-height: 1.6;\n"
                "  color: #666;\n"
                "  margin-bottom: 0;\n"
                "}"),
            3: ("CAP√çTULO 3 - FLEXBOX E GRID",
                "Flexbox e Grid s√£o sistemas de layout modernos que facilitam a cria√ß√£o de "
                "layouts responsivos e alinhamentos complexos.\n\n"
                "FLEXBOX - LAYOUT UNIDIMENSIONAL:\n\n"
                "CONTAINER FLEX (pai):\n"
                ".container {\n"
                "  display: flex;\n"
                "  flex-direction: row; /* row, column, row-reverse, column-reverse */\n"
                "  justify-content: center; /* main axis: flex-start, center, flex-end, space-between, space-around */\n"
                "  align-items: center; /* cross axis: flex-start, center, flex-end, stretch */\n"
                "  flex-wrap: wrap; /* nowrap, wrap, wrap-reverse */\n"
                "  gap: 20px; /* espa√ßamento entre itens */\n"
                "}\n\n"
                "ITENS FLEX (filhos):\n"
                ".item {\n"
                "  flex: 1; /* grow shrink basis */\n"
                "  flex-grow: 1; /* cresce para preencher espa√ßo */\n"
                "  flex-shrink: 0; /* n√£o encolhe */\n"
                "  flex-basis: 200px; /* tamanho base */\n"
                "  align-self: flex-end; /* alinhamento individual */\n"
                "}\n\n"
                "EXEMPLO FLEXBOX - NAVBAR:\n\n"
                "HTML:\n"
                "<nav class='navbar'>\n"
                "  <div class='logo'>MeuSite</div>\n"
                "  <ul class='menu'>\n"
                "    <li><a href='#'>Home</a></li>\n"
                "    <li><a href='#'>Sobre</a></li>\n"
                "    <li><a href='#'>Contato</a></li>\n"
                "  </ul>\n"
                "</nav>\n\n"
                "CSS:\n"
                ".navbar {\n"
                "  display: flex;\n"
                "  justify-content: space-between;\n"
                "  align-items: center;\n"
                "  padding: 1rem 2rem;\n"
                "  background-color: #333;\n"
                "}\n\n"
                ".menu {\n"
                "  display: flex;\n"
                "  list-style: none;\n"
                "  gap: 2rem;\n"
                "  margin: 0;\n"
                "}\n\n"
                "CSS GRID - LAYOUT BIDIMENSIONAL:\n\n"
                "CONTAINER GRID:\n"
                ".grid-container {\n"
                "  display: grid;\n"
                "  grid-template-columns: 1fr 2fr 1fr; /* 3 colunas */\n"
                "  grid-template-rows: auto 1fr auto; /* 3 linhas */\n"
                "  grid-gap: 20px; /* espa√ßamento */\n"
                "  height: 100vh;\n"
                "}\n\n"
                "POSICIONAMENTO DE ITENS:\n"
                ".header {\n"
                "  grid-column: 1 / -1; /* ocupa todas as colunas */\n"
                "  grid-row: 1;\n"
                "}\n\n"
                ".sidebar {\n"
                "  grid-column: 1;\n"
                "  grid-row: 2;\n"
                "}\n\n"
                ".main {\n"
                "  grid-column: 2;\n"
                "  grid-row: 2;\n"
                "}\n\n"
                "EXEMPLO GRID - LAYOUT COMPLETO:\n\n"
                ".page-layout {\n"
                "  display: grid;\n"
                "  grid-template-areas:\n"
                "    'header header header'\n"
                "    'sidebar main aside'\n"
                "    'footer footer footer';\n"
                "  grid-template-columns: 200px 1fr 150px;\n"
                "  grid-template-rows: auto 1fr auto;\n"
                "  min-height: 100vh;\n"
                "  gap: 1rem;\n"
                "}\n\n"
                ".header { grid-area: header; }\n"
                ".sidebar { grid-area: sidebar; }\n"
                ".main { grid-area: main; }\n"
                ".aside { grid-area: aside; }\n"
                ".footer { grid-area: footer; }")
        }
    else:  # L√ìGICA DE PROGRAMA√á√ÉO
        biblioteca = {
            1: ("CAP√çTULO 1 - INTRODU√á√ÉO √Ä L√ìGICA DE PROGRAMA√á√ÉO",
                "A l√≥gica de programa√ß√£o √© a base fundamental para resolver problemas atrav√©s de "
                "algoritmos e estruturas de pensamento organizadas.\n\n"
                "O QUE √â L√ìGICA DE PROGRAMA√á√ÉO?\n\n"
                "√â a capacidade de organizar o pensamento de forma sequencial e l√≥gica para "
                "resolver problemas, dividindo-os em etapas menores e mais simples.\n\n"
                "CONCEITOS FUNDAMENTAIS:\n\n"
                "1. ALGORITMO:\n"
                "Sequ√™ncia finita de passos para resolver um problema.\n\n"
                "Exemplo - Fazer um sandu√≠che:\n"
                "1. Pegar 2 fatias de p√£o\n"
                "2. Passar manteiga no p√£o\n"
                "3. Colocar o recheio\n"
                "4. Fechar o sandu√≠che\n"
                "5. Servir\n\n"
                "2. VARI√ÅVEIS:\n"
                "Espa√ßos na mem√≥ria para armazenar dados que podem mudar.\n\n"
                "Exemplo:\n"
                "nome = 'Jo√£o'\n"
                "idade = 25\n"
                "altura = 1.75\n"
                "estudante = True\n\n"
                "TIPOS DE DADOS:\n"
                "‚Ä¢ Inteiro: 10, -5, 0\n"
                "‚Ä¢ Real/Float: 3.14, -2.5, 0.0\n"
                "‚Ä¢ Texto/String: 'Ol√°', 'Python', '123'\n"
                "‚Ä¢ L√≥gico/Boolean: True, False\n\n"
                "3. OPERADORES:\n\n"
                "ARITM√âTICOS:\n"
                "+ (soma): 5 + 3 = 8\n"
                "- (subtra√ß√£o): 10 - 4 = 6\n"
                "* (multiplica√ß√£o): 3 * 4 = 12\n"
                "/ (divis√£o): 15 / 3 = 5\n"
                "% (resto): 10 % 3 = 1\n"
                "** (pot√™ncia): 2 ** 3 = 8\n\n"
                "RELACIONAIS:\n"
                "== (igual): 5 == 5 ‚Üí True\n"
                "!= (diferente): 3 != 5 ‚Üí True\n"
                "> (maior): 8 > 3 ‚Üí True\n"
                "< (menor): 2 < 7 ‚Üí True\n"
                ">= (maior ou igual): 5 >= 5 ‚Üí True\n"
                "<= (menor ou igual): 3 <= 4 ‚Üí True\n\n"
                "L√ìGICOS:\n"
                "and (E): True and False ‚Üí False\n"
                "or (OU): True or False ‚Üí True\n"
                "not (N√ÉO): not True ‚Üí False\n\n"
                "EXEMPLO PR√ÅTICO - CALCULADORA SIMPLES:\n\n"
                "# Entrada de dados\n"
                "numero1 = float(input('Digite o primeiro n√∫mero: '))\n"
                "operacao = input('Digite a opera√ß√£o (+, -, *, /): ')\n"
                "numero2 = float(input('Digite o segundo n√∫mero: '))\n\n"
                "# Processamento\n"
                "if operacao == '+':\n"
                "    resultado = numero1 + numero2\n"
                "elif operacao == '-':\n"
                "    resultado = numero1 - numero2\n"
                "elif operacao == '*':\n"
                "    resultado = numero1 * numero2\n"
                "elif operacao == '/' and numero2 != 0:\n"
                "    resultado = numero1 / numero2\n"
                "else:\n"
                "    resultado = 'Opera√ß√£o inv√°lida'\n\n"
                "# Sa√≠da\n"
                "print(f'Resultado: {resultado}')"),
            2: ("CAP√çTULO 2 - ESTRUTURAS DE CONTROLE",
                "As estruturas de controle permitem alterar o fluxo de execu√ß√£o do programa "
                "baseado em condi√ß√µes e repeti√ß√µes.\n\n"
                "1. ESTRUTURAS CONDICIONAIS:\n\n"
                "IF SIMPLES:\n"
                "if condi√ß√£o:\n"
                "    # c√≥digo executado se condi√ß√£o for verdadeira\n"
                "    print('Condi√ß√£o verdadeira')\n\n"
                "Exemplo:\n"
                "idade = 18\n"
                "if idade >= 18:\n"
                "    print('Maior de idade')\n\n"
                "IF-ELSE:\n"
                "if condi√ß√£o:\n"
                "    # c√≥digo se verdadeiro\n"
                "else:\n"
                "    # c√≥digo se falso\n\n"
                "Exemplo:\n"
                "nota = 7.5\n"
                "if nota >= 7.0:\n"
                "    print('Aprovado')\n"
                "else:\n"
                "    print('Reprovado')\n\n"
                "IF-ELIF-ELSE (m√∫ltiplas condi√ß√µes):\n"
                "if condi√ß√£o1:\n"
                "    # c√≥digo 1\n"
                "elif condi√ß√£o2:\n"
                "    # c√≥digo 2\n"
                "elif condi√ß√£o3:\n"
                "    # c√≥digo 3\n"
                "else:\n"
                "    # c√≥digo padr√£o\n\n"
                "Exemplo - Sistema de notas:\n"
                "nota = float(input('Digite sua nota: '))\n\n"
                "if nota >= 9.0:\n"
                "    conceito = 'A - Excelente'\n"
                "elif nota >= 8.0:\n"
                "    conceito = 'B - Muito Bom'\n"
                "elif nota >= 7.0:\n"
                "    conceito = 'C - Bom'\n"
                "elif nota >= 6.0:\n"
                "    conceito = 'D - Regular'\n"
                "else:\n"
                "    conceito = 'F - Insuficiente'\n\n"
                "print(f'Seu conceito: {conceito}')\n\n"
                "2. ESTRUTURAS DE REPETI√á√ÉO:\n\n"
                "FOR (repeti√ß√£o com contador):\n"
                "for variavel in range(inicio, fim, passo):\n"
                "    # c√≥digo a repetir\n\n"
                "Exemplos:\n"
                "# Contar de 1 a 5\n"
                "for i in range(1, 6):\n"
                "    print(f'N√∫mero: {i}')\n\n"
                "# Tabuada do 5\n"
                "for i in range(1, 11):\n"
                "    resultado = 5 * i\n"
                "    print(f'5 x {i} = {resultado}')\n\n"
                "WHILE (repeti√ß√£o com condi√ß√£o):\n"
                "while condi√ß√£o:\n"
                "    # c√≥digo a repetir\n"
                "    # atualizar vari√°vel de controle\n\n"
                "Exemplo - Contador:\n"
                "contador = 1\n"
                "while contador <= 5:\n"
                "    print(f'Contagem: {contador}')\n"
                "    contador += 1  # contador = contador + 1\n\n"
                "Exemplo - Menu com repeti√ß√£o:\n"
                "opcao = 0\n"
                "while opcao != 4:\n"
                "    print('1 - Cadastrar')\n"
                "    print('2 - Listar')\n"
                "    print('3 - Excluir')\n"
                "    print('4 - Sair')\n"
                "    opcao = int(input('Escolha: '))\n"
                "    \n"
                "    if opcao == 1:\n"
                "        print('Cadastrando...')\n"
                "    elif opcao == 2:\n"
                "        print('Listando...')\n"
                "    elif opcao == 3:\n"
                "        print('Excluindo...')\n"
                "    elif opcao == 4:\n"
                "        print('Saindo...')\n"
                "    else:\n"
                "        print('Op√ß√£o inv√°lida!')\n\n"
                "CONTROLE DE FLUXO:\n"
                "‚Ä¢ break: sai do loop\n"
                "‚Ä¢ continue: pula para pr√≥xima itera√ß√£o\n\n"
                "Exemplo:\n"
                "for i in range(1, 11):\n"
                "    if i == 5:\n"
                "        continue  # pula o 5\n"
                "    if i == 8:\n"
                "        break     # para no 8\n"
                "    print(i)  # imprime: 1, 2, 3, 4, 6, 7"),
            3: ("CAP√çTULO 3 - ESTRUTURAS DE DADOS E FUN√á√ïES",
                "Estruturas de dados organizam informa√ß√µes, e fun√ß√µes organizam c√≥digo "
                "para reutiliza√ß√£o e modulariza√ß√£o.\n\n"
                "1. LISTAS (ARRAYS):\n\n"
                "CRIA√á√ÉO E ACESSO:\n"
                "# Criar lista\n"
                "frutas = ['ma√ß√£', 'banana', 'laranja', 'uva']\n"
                "numeros = [1, 2, 3, 4, 5]\n"
                "mista = ['Jo√£o', 25, True, 1.75]\n\n"
                "# Acessar elementos (√≠ndice come√ßa em 0)\n"
                "print(frutas[0])    # 'ma√ß√£'\n"
                "print(frutas[-1])   # 'uva' (√∫ltimo elemento)\n"
                "print(frutas[1:3])  # ['banana', 'laranja'] (fatia)\n\n"
                "OPERA√á√ïES COM LISTAS:\n"
                "# Adicionar elementos\n"
                "frutas.append('p√™ra')           # adiciona no final\n"
                "frutas.insert(1, 'manga')       # adiciona na posi√ß√£o 1\n\n"
                "# Remover elementos\n"
                "frutas.remove('banana')         # remove por valor\n"
                "fruta_removida = frutas.pop()   # remove e retorna o √∫ltimo\n"
                "del frutas[0]                   # remove por √≠ndice\n\n"
                "# Outras opera√ß√µes\n"
                "print(len(frutas))              # tamanho da lista\n"
                "print('ma√ß√£' in frutas)         # verifica se existe\n"
                "frutas.sort()                   # ordena a lista\n"
                "frutas.reverse()                # inverte a ordem\n\n"
                "PERCORRER LISTAS:\n"
                "# M√©todo 1 - por elemento\n"
                "for fruta in frutas:\n"
                "    print(f'Fruta: {fruta}')\n\n"
                "# M√©todo 2 - por √≠ndice\n"
                "for i in range(len(frutas)):\n"
                "    print(f'Posi√ß√£o {i}: {frutas[i]}')\n\n"
                "# M√©todo 3 - com enumerate\n"
                "for i, fruta in enumerate(frutas):\n"
                "    print(f'Posi√ß√£o {i}: {fruta}')\n\n"
                "2. DICION√ÅRIOS:\n\n"
                "CRIA√á√ÉO E ACESSO:\n"
                "# Criar dicion√°rio\n"
                "pessoa = {\n"
                "    'nome': 'Ana',\n"
                "    'idade': 28,\n"
                "    'cidade': 'S√£o Paulo',\n"
                "    'profissao': 'Engenheira'\n"
                "}\n\n"
                "# Acessar valores\n"
                "print(pessoa['nome'])           # 'Ana'\n"
                "print(pessoa.get('idade'))      # 28\n"
                "print(pessoa.get('salario', 0)) # 0 (valor padr√£o)\n\n"
                "# Modificar e adicionar\n"
                "pessoa['idade'] = 29            # modifica\n"
                "pessoa['salario'] = 5000        # adiciona nova chave\n\n"
                "# Percorrer dicion√°rio\n"
                "for chave, valor in pessoa.items():\n"
                "    print(f'{chave}: {valor}')\n\n"
                "3. FUN√á√ïES:\n\n"
                "DEFINI√á√ÉO E USO:\n"
                "def nome_da_funcao(parametros):\n"
                "    # c√≥digo da fun√ß√£o\n"
                "    return valor  # opcional\n\n"
                "# Fun√ß√£o simples\n"
                "def saudacao():\n"
                "    print('Ol√°, mundo!')\n\n"
                "# Chamar fun√ß√£o\n"
                "saudacao()  # executa a fun√ß√£o\n\n"
                "FUN√á√ïES COM PAR√ÇMETROS:\n"
                "def saudacao_personalizada(nome):\n"
                "    print(f'Ol√°, {nome}!')\n\n"
                "def somar(a, b):\n"
                "    resultado = a + b\n"
                "    return resultado\n\n"
                "# Usar as fun√ß√µes\n"
                "saudacao_personalizada('Maria')\n"
                "soma = somar(5, 3)\n"
                "print(f'Soma: {soma}')\n\n"
                "EXEMPLO COMPLETO - SISTEMA DE CADASTRO:\n\n"
                "# Lista para armazenar pessoas\n"
                "pessoas = []\n\n"
                "def cadastrar_pessoa():\n"
                "    nome = input('Nome: ')\n"
                "    idade = int(input('Idade: '))\n"
                "    cidade = input('Cidade: ')\n"
                "    \n"
                "    pessoa = {\n"
                "        'nome': nome,\n"
                "        'idade': idade,\n"
                "        'cidade': cidade\n"
                "    }\n"
                "    \n"
                "    pessoas.append(pessoa)\n"
                "    print('Pessoa cadastrada com sucesso!')\n\n"
                "def listar_pessoas():\n"
                "    if len(pessoas) == 0:\n"
                "        print('Nenhuma pessoa cadastrada.')\n"
                "        return\n"
                "    \n"
                "    for i, pessoa in enumerate(pessoas, 1):\n"
                "        print(f'{i}. {pessoa[\"nome\"]} - {pessoa[\"idade\"]} anos - {pessoa[\"cidade\"]}')\n\n"
                "def buscar_pessoa(nome_busca):\n"
                "    for pessoa in pessoas:\n"
                "        if pessoa['nome'].lower() == nome_busca.lower():\n"
                "            return pessoa\n"
                "    return None\n\n"
                "# Menu principal\n"
                "while True:\n"
                "    print('\\n1 - Cadastrar')\n"
                "    print('2 - Listar')\n"
                "    print('3 - Buscar')\n"
                "    print('4 - Sair')\n"
                "    \n"
                "    opcao = input('Escolha: ')\n"
                "    \n"
                "    if opcao == '1':\n"
                "        cadastrar_pessoa()\n"
                "    elif opcao == '2':\n"
                "        listar_pessoas()\n"
                "    elif opcao == '3':\n"
                "        nome = input('Nome para buscar: ')\n"
                "        pessoa = buscar_pessoa(nome)\n"
                "        if pessoa:\n"
                "            print(f'Encontrado: {pessoa}')\n"
                "        else:\n"
                "            print('Pessoa n√£o encontrada.')\n"
                "    elif opcao == '4':\n"
                "        break\n"
                "    else:\n"
                "        print('Op√ß√£o inv√°lida!')")
        }

    while True:
        print("\nESCOLHA UMA OP√á√ÉO:")
        print("[1] ESTUDAR")
        print("[2] FAZER AVALIA√á√ÉO")
        print("[3] ESCOLHER OUTRO CURSO")
        print("[4] SAIR")
        
        try:
            opcao = int(input("Digite sua op√ß√£o: "))

            if opcao == 1:
                if curso == "HTML":
                    estudar_capitulos(biblioteca, curso, quiz_html)
                elif curso == "CSS":
                    estudar_capitulos(biblioteca, curso, quiz_css)
                else:  # L√ìGICA DE PROGRAMA√á√ÉO
                    estudar_capitulos(biblioteca, curso, quiz_logica)

            elif opcao == 2:
                if curso == "HTML":
                    fazer_quiz_html(quiz_html, biblioteca)
                elif curso == "CSS":
                    fazer_quiz_css(quiz_css, biblioteca)
                else:  # L√ìGICA DE PROGRAMA√á√ÉO
                    fazer_quiz_logica(quiz_logica, biblioteca)

            elif opcao == 3:
                print("üîÑ Voltando para sele√ß√£o de cursos...")
                unitech()  # Reinicia o programa
                return

            elif opcao == 4:
                print("\nAT√â LOGO!")
                break

            else:
                print("‚ùå Op√ß√£o inv√°lida, tente novamente.")
                
        except ValueError:
            print("‚ùå Digite apenas n√∫meros de 1 a 4.")

# Executa o programa
unitech()
